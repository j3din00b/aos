! version = 2.0

> object randomcat python
	import requests
	data = requests.get('http://aws.random.cat/meow').json()
	return f"{data['file']}"
< object

> object randomdog python
	import requests
	data = requests.get('https://random.dog/woof.json').json()
	return f"{data['url']}"
< object

> object exiteu python
	v = ['a', 'e', 'i', 'o', 'u']
	name = ' '.join(args)
	name = name.lower()
	start = []
	for item in name:
		start.append(item)
		if item in v:
			break

	return ''.join(start)+"xit"
< object

> object roll python
	import random
	lower = int(args[0])
	upper = int(args[1])

	return random.randint(lower, upper)
< object

> object asciitobinary python
	from tools.converters import BinaryCoder
	try:
		return BinaryCoder().encrypt(' '.join(args))
	except Exception as e:
		return e
< object

> object binarytoascii python
	from tools.converters import BinaryCoder
	try:
		return BinaryCoder().decrypt(' '.join(args))
	except Exception as e:
		return e
< object

> object asciitomorse python
	from tools.converters import MorseCoder
	try:
		return MorseCoder().encrypt(' '.join(args))
	except Exception as e:
		return e
< object

> object morsetoascii python
	from tools.converters import MorseCoder
	print(args)
	try:
		return MorseCoder().decrypt(''.join(args))
	except Exception as e:
		return e
< object

> object converthextoascii python
	import codecs
	msg = ' '.join(args)
	print(msg)
	decode_hex = codecs.getdecoder("hex_codec")

	arr = msg.split()
	msg = ""
	for item in arr:
		msg += decode_hex(item)[0].decode('ascii')

	return msg
< object

> object increment python
	return int(args[0]) + 1
< object

> object rand python
	import random
	print(args)
	#rs.dispatch('choice', choices=' '.join(args))
< object

> object aos python
	ctx = rs._session.aos
	ctx.quick_run(" ".join(args))
< object

> object sdrand python
	if len(args) == 1:
		return rs._session.aos.sd_get_random(args[0])
	else:
		out = []
		for i in range(0, int(args[1])):
			out.append(rs._session.aos.sd_get_random(args[0]))

		return ", ".join(out)
< object

> object setname python
rs._session.aos.set_username(" ".join(args))
< object

> object getname python
return rs._session.aos.username()
< object

> object setuserproperty python
rs._session.aos.set_user_property(args[0], " ".join(args[1:]))
< object

> object getuserproperty python
return rs._session.aos.get_user_property(" ".join(args))
< object
